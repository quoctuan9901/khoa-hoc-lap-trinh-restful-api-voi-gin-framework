CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- Create table
CREATE TABLE IF NOT EXISTS users (
	user_id 		INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	user_uuid 		UUID NOT NULL DEFAULT gen_random_uuid() UNIQUE,
	user_email 		VARCHAR(150) NOT NULL UNIQUE,
	user_password	VARCHAR(90) NOT NULL,
	user_fullname	VARCHAR(100) NOT NULL,
	user_age		INT CHECK (user_age >= 1 AND user_age <= 150),
	user_status		INT NOT NULL DEFAULT 1 CHECK (user_status IN (1, 2, 3)),
	user_level		INT NOT NULL DEFAULT 1 CHECK (user_level IN (1, 2, 3)),
	user_deleted_at	TIMESTAMPTZ DEFAULT NULL,
	user_created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
	user_updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Create comment
COMMENT ON COLUMN users.user_age IS 'User age, must be between 1 and 150';
COMMENT ON COLUMN users.user_status IS 'User status: 1 - Active, 2 - Inactive, 3 - Banned';
COMMENT ON COLUMN users.user_level IS 'User level: 1 - Administrator, 2 - Moderator, 3 - Member';
COMMENT ON COLUMN users.user_deleted_at IS 'Soft delete timestamp: NULL means not deleted';

-- Create index (SELECT:good - INSERT, UPDATE not good if many index)
CREATE INDEX IF NOT EXISTS idx_users_status ON users(user_status);
CREATE INDEX IF NOT EXISTS idx_users_level ON users(user_level);
CREATE INDEX IF NOT EXISTS idx_users_created_at ON users(user_created_at);
CREATE INDEX IF NOT EXISTS idx_user_deleted_at ON users(user_deleted_at);
CREATE INDEX IF NOT EXISTS idx_users_email_status ON users(user_email, user_status);

-- Create trigger
CREATE OR REPLACE FUNCTION update_user_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
	NEW.user_updated_at = now();
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_user_updated_at
BEFORE UPDATE on users
FOR EACH ROW
EXECUTE FUNCTION update_user_updated_at_column();